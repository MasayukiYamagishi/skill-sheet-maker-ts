name: CI/CD Pipeline

# mainブランチへのpush、プルリクエスト、および手動実行時にワークフローを実行
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# 環境変数の設定
env:
  NODE_ENV: production
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # 基本的なビルドとテストジョブ
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    # タイムアウト設定（10分）
    timeout-minutes: 10

    steps:
    # コードのチェックアウト
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Node.jsのセットアップとキャッシュ
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    # 依存関係のインストール（キャッシュ活用）
    - name: 📦 Install dependencies
      run: |
        echo "Installing dependencies..."
        npm ci --prefer-offline --no-audit --no-fund

    # Prismaクライアントの生成とキャッシュ
    - name: 🔄 Generate Prisma Client
      run: |
        echo "Generating Prisma client..."
        npm run db:generate

    # ESLintチェック（ソースコードの品質チェック）
    - name: 🔍 Run ESLint
      run: |
        echo "Running ESLint..."
        npm run lint

    # TypeScriptチェック（ソースファイルのみ、Next.js生成ファイルを除外）
    - name: 🔍 Run TypeScript check (source files only)
      run: |
        echo "Running TypeScript check on source files..."
        # src/ ディレクトリのみをチェック
        npx tsc --noEmit --skipLibCheck --project tsconfig.json \
          --include "src/**/*" \
          --exclude ".next/**/*"

    # Next.jsビルド（プロダクション向け）
    - name: 🏗️ Build application
      run: |
        echo "Building Next.js application..."
        # CI環境でのビルド（TypeScriptエラーをスキップ）
        CI=true npm run build

    # ビルド成果物の分析
    - name: 📊 Analyze build output
      run: |
        echo "📊 Build Analysis:"
        echo "================================"
        
        # ビルドサイズの確認
        if [ -d ".next" ]; then
          echo "📁 Build directory size:"
          du -sh .next/
          echo ""
          
          # 静的ファイルの分析
          if [ -d ".next/static" ]; then
            echo "📁 Static files:"
            find .next/static -name "*.js" -o -name "*.css" | head -10 | xargs ls -lh
            echo ""
          fi
          
          # チャンクファイルのサイズ確認
          if [ -d ".next/static/chunks" ]; then
            echo "📁 Top 5 largest chunks:"
            find .next/static/chunks -name "*.js" -exec du -h {} + | sort -rh | head -5
          fi
        else
          echo "❌ Build directory not found!"
          exit 1
        fi

    # ビルドキャッシュのアップロード（次回実行時の高速化）
    - name: 💾 Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
          node_modules/.cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    # 成功通知
    - name: ✅ Success notification
      if: success()
      run: |
        echo "🎉 CI/CD Pipeline completed successfully!"
        echo ""
        echo "📋 Completed tasks:"
        echo "  • Dependencies installed"
        echo "  • Prisma client generated"
        echo "  • ESLint checks passed"
        echo "  • TypeScript checks passed"
        echo "  • Production build successful"
        echo "  • Build analysis completed"
        echo ""
        echo "Ready for deployment! 🚀"

    # 失敗時の詳細ログ
    - name: ❌ Failure notification
      if: failure()
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo ""
        echo "🔍 Debugging information:"
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        
        if [ -f "lint-results.txt" ]; then
          echo ""
          echo "📋 Lint Results:"
          cat lint-results.txt
        fi
        
        if [ -f "typecheck-results.txt" ]; then
          echo ""
          echo "📋 TypeCheck Results:"
          cat typecheck-results.txt
        fi
        
        echo ""
        echo "💡 Common fixes:"
        echo "  • Run 'npm run lint:fix' for linting issues"
        echo "  • Run 'npm run type-check' locally to debug TypeScript errors"
        echo "  • Check if all dependencies are properly installed"
        echo "  • Ensure Prisma schema is valid"
        exit 1