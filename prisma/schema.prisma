generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userIdentifier     String              @unique @map("user_identifier")
  name               String
  nameKana           String              @map("name_kana")
  birthDate          DateTime            @map("birth_date") @db.Date
  gender             String
  email              String              @unique
  mbtiType           String?             @map("mbti_type")
  joinedAt           DateTime?           @map("joined_at") @db.Date
  retiredAt          DateTime?           @map("retired_at") @db.Date
  finalEducation     String?             @map("final_education")
  status             String
  affiliation        String?
  avatarPath         String?             @map("avatar_path")
  githubUrl          String?             @map("github_url")
  prText             String?             @map("pr_text")
  specialty          String?
  techStrength       String?             @map("tech_strength")
  salesComment       String?             @map("sales_comment")
  toeicScore         Int?                @map("toeic_score")
  otherSkills        String?             @map("other_skills")
  mbtiIdentity       String?             @map("mbti_identity")
  careerHistories    CareerHistory[]
  userQualifications UserQualification[]
  userSkills         UserSkill[]
  mbtiTypeRef        MbtiType?           @relation(fields: [mbtiType], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_mbti_type")
  mbtiIdentityRef    MbtiIdentity?       @relation(fields: [mbtiIdentity], references: [code], onDelete: NoAction, onUpdate: NoAction)

  @@map("users")
}

model Qualification {
  id                 String              @id
  name               String              @unique
  description        String?
  isNational         Boolean             @default(false) @map("is_national")
  userQualifications UserQualification[]

  @@map("qualifications")
}

model UserQualification {
  userId          String        @map("user_id") @db.Uuid
  qualificationId String        @map("qualification_id")
  acquiredAt      DateTime?     @map("acquired_at") @db.Date
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  qualification   Qualification @relation(fields: [qualificationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, qualificationId])
  @@map("user_qualifications")
}

model SkillCategory {
  id          String  @id
  label       String
  description String?
  skills      Skill[]

  @@map("skill_categories")
}

model SkillTag {
  id           String        @id
  label        String
  description  String?
  skillTagMaps SkillTagMap[]

  @@map("skill_tags")
}

model Skill {
  id           String        @id
  label        String
  description  String?
  deviconId    String?       @map("devicon_id")
  categoryId   String        @map("category_id")
  careerSkills CareerSkill[]
  skillTagMaps SkillTagMap[]
  category     SkillCategory @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userSkills   UserSkill[]

  @@map("skills")
}

model SkillTagMap {
  skillId String   @map("skill_id")
  tagId   String   @map("tag_id")
  skill   Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag     SkillTag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([skillId, tagId])
  @@map("skill_tag_map")
}

model UserSkill {
  userId    String   @map("user_id") @db.Uuid
  skillId   String   @map("skill_id")
  version   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  skill     Skill    @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, skillId])
  @@map("user_skills")
}

model CareerHistory {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String          @map("user_id") @db.Uuid
  title           String
  startedAt       DateTime?       @map("started_at") @db.Date
  endedAt         DateTime?       @map("ended_at") @db.Date
  description     String?
  role            String?
  scale           String?
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  careerProcesses CareerProcess[]
  careerSkills    CareerSkill[]

  @@map("career_histories")
}

model CareerSkill {
  careerId  String        @map("career_id") @db.Uuid
  skillId   String        @map("skill_id")
  version   String?
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  career    CareerHistory @relation(fields: [careerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  skill     Skill         @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([careerId, skillId])
  @@map("career_skills")
}

model MasterProcess {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  careerProcesses CareerProcess[]

  @@map("master_processes")
}

model CareerProcess {
  careerId  String        @map("career_id") @db.Uuid
  processId Int           @map("process_id")
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  career    CareerHistory @relation(fields: [careerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  process   MasterProcess @relation(fields: [processId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([careerId, processId])
  @@map("career_processes")
}

model MbtiGroup {
  id          String     @id
  label       String
  description String     @default("")
  mbtiTypes   MbtiType[]

  @@map("mbti_groups")
}

model MbtiType {
  code             String    @id
  groupId          String    @map("group_id")
  name             String
  nameEn           String?   @map("name_en")
  positiveKeywords String[]  @default([]) @map("positive_keywords")
  negativeKeywords String[]  @default([]) @map("negative_keywords")
  description      String
  features         String[]  @default([])
  group            MbtiGroup @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users            User[]

  @@map("mbti_types")
}

model MbtiIdentity {
  code        String @id
  label       String
  description String @default("")
  users       User[]

  @@map("mbti_identities")
}

